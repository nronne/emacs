#+STARTUP: overview
* General Setup

** Initial screen size
#+BEGIN_SRC emacs-lisp
  (add-hook 'window-setup-hook 'toggle-frame-maximized t)
#+END_SRC      
** Remap for MacOS
   #+BEGIN_SRC emacs-lisp
     (setq mac-command-modifier 'meta)
     (setq mac-option-modifier 'super)
   #+END_SRC

** Interface
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (save-place-mode 1)
  (show-paren-mode 1)
  (column-number-mode 1)
  ;; (global-display-line-numbers-mode 1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq ring-bell-function 'ignore)
#+END_SRC

** Buffer
#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
  (setq uniquify-separator "/")
  (setq uniquify-after-kill-buffer-p t)    ; rename after killing uniquified
  (setq uniquify-ignore-buffers-re "^\\*") ; don't muck with special buffers
  (global-set-key (kbd "C-x C-b") 'bs-show) ; Changes buffer-list
#+END_SRC


** Backup handling
#+BEGIN_SRC emacs-lisp
  (setq backup-by-copying t)
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
	backup-by-copying t    ; Don't delink hardlinks
	version-control t      ; Use version numbers on backups
	delete-old-versions t  ; Automatically delete excess backups
	kept-new-versions 20   ; how many of the newest versions to keep
	kept-old-versions 5    ; and how many of the old
    )
#+END_SRC

** autopair
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode 1)
#+END_SRC
** line numbers
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode)
  (setq display-line-numbers-type 'relative)
#+END_SRC
** spell checker
#+BEGIN_SRC emacs-lisp
(setq ispell-program-name "/opt/homebrew/bin/aspell")
#+END_SRC
** straight.el
#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC
** python mode
#+BEGIN_SRC emacs-lisp
  ;; (setq python-shell-interpreter "python")
#+END_SRC

* Theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
  :ensure t
  :init (load-theme 'doom-moonlight t))
  ;; (use-package doom-themes
  ;; :ensure t
  ;; :init (load-theme 'doom-acario-light t))

  (use-package all-the-icons
    :ensure t)


    (use-package all-the-icons
      :ensure t)

    (use-package doom-modeline
      :ensure t
      :defer t
      :init
      (doom-modeline-mode 1)
      (setq doom-modeline-buffer-encoding nil))

    (defun enable-doom-modeline-icons (_frame)
      (setq doom-modeline-icon t))

    (add-hook 'after-make-frame-functions 
	      #'enable-doom-modeline-icons)

#+END_SRC


* Installed packages
** easy-kill
#+BEGIN_SRC emacs-lisp
  (use-package easy-kill
    :ensure t
    :config
    (global-set-key [remap kill-ring-save] 'easy-kill))
#+END_SRC

** try
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t 
    :config
    (which-key-mode))
#+END_SRC

** expand-region
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :config
       (global-set-key (kbd "M-SPC") 'er/expand-region))
   #+END_SRC

** iedit, narrow-or-widen-dwim
   #+BEGIN_SRC emacs-lisp
     ; mark and edit all copies of the marked region simultaniously. 
     (use-package iedit
       :ensure t
       :config
       (global-set-key (kbd "C-c i") 'iedit-mode))


     ; if you're windened, narrow to the region, if you're narrowed, widen
     ; bound to C-x n
     (defun narrow-or-widen-dwim (p)
       "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
     Intelligently means: region, org-src-block, org-subtree, or defun,
     whichever applies first.
     Narrowing to org-src-block actually calls `org-edit-src-code'.

     With prefix P, don't widen, just narrow even if buffer is already
     narrowed."
       (interactive "P")
     (declare (interactive-only))
     (cond ((and (buffer-narrowed-p) (not p)) (widen))
	   ((region-active-p)
     (narrow-to-region (region-beginning) (region-end)))
	   ((derived-mode-p 'org-mode)
	    ;; `org-edit-src-code' is not a real narrowing command.
     ;; Remove this first conditional if you don't want it.
	    (cond ((ignore-errors (org-edit-src-code))
		   (delete-other-windows))
		  ((org-at-block-p)
		   (org-narrow-to-block))
		  (t (org-narrow-to-subtree))))
	   (t (narrow-to-defun))))

     ;; (define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
     ;; This line actually replaces Emacs' entire narrowing keymap, that's
     ;; how much I like this command. Only copy it if that's what you want.
     (define-key ctl-x-map "n" #'narrow-or-widen-dwim)

   #+END_SRC

** org mode
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    (add-hook 'org-mode-hook (lambda () (flyspell-mode 1) ))    
    )
(eval-after-load 'org
  (progn
    (define-key org-mode-map (kbd "C-c C-k") nil)
    (define-key org-mode-map (kbd "C-c k") nil)))
#+END_SRC

** ido
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t) ; ido package  
  (setq ido-everywhere t) 
  (ido-mode 1)
#+END_SRC

** undo-tree
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :ensure t
       :init
       (global-undo-tree-mode))
     (setq undo-tree-auto-save-history nil)
   #+END_SRC

** counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))

#+END_SRC

** swiper/ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "%d/%d ")
    (setq ivy-display-style 'fancy))

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :ensure t
    :init (ivy-rich-mode 1)
    (setq ivy-rich-path-style 'abbrev)
    :config
      ;; override ivy-rich project root finding to use FFIP or to skip completely
    (defun ivy-rich-switch-buffer-root (candidate)
      (when-let* ((dir (ivy-rich--switch-buffer-directory candidate)))
	(unless (or (and (file-remote-p dir)
		   (not ivy-rich-parse-remote-buffer))
	      (string-match "https?://" dir))
    (cond
     ((require 'find-file-in-project nil t)
      (let ((default-directory dir))
	(ffip-project-root)))
     (t "")
     ((bound-and-true-p projectile-mode)
      (let ((project (or (ivy-rich--local-values
			  candidate 'projectile-project-root)
			 (projectile-project-root dir))))
	(unless (string= project "-")
	  project)))
     ((require 'project nil t)
      (when-let ((project (project-current nil dir)))
	(car (project-roots project))))
     )))))
  

  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper-isearch)
	   ("C-r" . swiper-isearch)
	   ("C-c C-r" . ivy-resume)
	   ("M-x" . counsel-M-x)
	   ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))
#+END_SRC

** ibuffer
   #+BEGIN_SRC emacs-lisp
		    (global-set-key (kbd "C-x C-b") 'ibuffer)
		    (setq ibuffer-saved-filter-groups
			     (quote (("default"
				      ("dired" (mode . dired-mode))
				      ("org" (name . "^.*org$"))
				      ("git" (or 
					      (mode . magit-blame-mode)
					      (mode . magit-cherry-mode)
					      (mode . magit-diff-mode)
					      (mode . magit-log-mode)
					      (mode . magit-process-mode)
					      (mode . magit-status-mode)))
				      ("web" (or (mode . web-mode) 
						 (mode . js2-mode)
						 (mode . css-mode)))
				      ("shell" (or
						(mode . eshell-mode)
						(mode . vterm-mode)
						(mode . shell-mode)))
				      ("programming" (or
						      (mode . python-mode)
						      (mode . c-mode)
						      (mode . csharp-mode)
						      (mode . make-mode)))
				      ("emacs" (or
						(name . "^\\*scratch\\*$")
						(name . "^\\*Messages\\*$")))
				      ))))
		    (add-hook 'ibuffer-mode-hook
				 (lambda ()
				   (ibuffer-auto-mode 1)
				   (ibuffer-switch-to-saved-filter-groups "default")
				   ;; (ibuffer-projectile-set-filter-groups)
				   ))


		    ;; Don't show filter groups if there are no buffers in that group
		    (setq ibuffer-show-empty-filter-groups nil)

		    (use-package all-the-icons-ibuffer
		      :ensure t
		      :init (all-the-icons-ibuffer-mode 1))
     
   #+END_SRC

** projectile
#+BEGIN_SRC emacs-lisp
  ;; (use-package projectile
  ;;       :ensure t
  ;;       :bind ("C-c p" . projectile-command-map)
  ;;       :config
  ;;       (projectile-global-mode))
#+END_SRC

** vterm
#+BEGIN_SRC emacs-lisp
  (use-package vterm
      :load-path "/Users/au566369/opt/emacs-libvterm/")

  (push (list "find-file-below"
	      (lambda (path)
		(if-let* ((buf (find-file-noselect path))
			  (window (display-buffer-below-selected buf nil)))
		    (select-window window)
		  (message "Failed to open file: %s" path))))
	vterm-eval-cmds)

  (push (list "find-file-above"
	      (lambda (path)
		(if-let* ((buf (find-file-noselect path))
			  (window (display-buffer-in-direction buf 'above)))
		    (select-window window)
		  (message "Failed to open file: %s" path))))
	vterm-eval-cmds)

  (push (list "find-file-right"
	      (lambda (path)
		(if-let* ((buf (find-file-noselect path))
			  (window (display-buffer-in-direction buf "right")))
		    (select-window window)
		  (message "Failed to open file: %s" path))))
	vterm-eval-cmds)

  (push (list "find-file-left"
	      (lambda (path)
		(if-let* ((buf (find-file-noselect path))
			  (window (display-buffer-in-direction buf "left")))
		    (select-window window)
		  (message "Failed to open file: %s" path))))
	vterm-eval-cmds)

#+END_SRC
** vterm-toggle
#+BEGIN_SRC emacs-lisp   
(use-package vterm-toggle
  :straight (vterm-toggle :type git :host github :repo "jixiuf/vterm-toggle" :branch "master"))

(global-set-key (kbd "s-,") 'vterm-toggle)
(global-set-key (kbd "s-.") 'vterm-toggle-cd)
#+END_SRC
** tramp
#+BEGIN_SRC emacs-lisp
   (customize-set-variable 'tramp-inline-compress-start-size 1000000)
   (setq tramp-default-method "ssh")
   (setq tramp-shell-prompt-pattern "\\(?:^\\|\r\\)[^]#$%>\n]*#?[]#$%>].* *\\(^[\\[[0-9;]*[a-zA-Z] *\\)*")
  ;; (setq magit-remote-git-executable "/comm/swstack/tools/git/2.14.2/bin/git")
  (setq magit-remote-git-executable "git")
   ;; (setq magit-git-executable "/comm/swstack/tools/git/2.14.2/bin/git")

#+END_SRC

** pyvenv
#+BEGIN_SRC emacs-lisp
  (use-package pyvenv
    :ensure t
    :config
    (pyvenv-mode 1))
#+END_SRC   
** copilot
#+BEGIN_SRC emacs-lisp
    (use-package copilot
	  :straight (:host github :repo "zerolfx/copilot.el" :files ("dist" "*.el"))
	  :ensure t
  )
      (add-hook 'prog-mode-hook 'copilot-mode)
    (with-eval-after-load 'company
      ;; disable inline previews
      (delq 'company-preview-if-just-one-frontend company-frontends))

    (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
    (define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion)
  (customize-set-variable 'copilot-node-executable "/opt/homebrew/bin/node")
(global-set-key (kbd "C-.") 'copilot-next-completion)
(global-set-key (kbd "C-,") 'copilot-previous-completion)
(global-set-key (kbd "C-'") 'copilot-complete)
(global-set-key (kbd "C-;") 'copilot-clear-overlay)


#+END_SRC   

** treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :config
    (progn
      (setq treemacs-width                           50))
    :bind
    (:map global-map
	  ("M-0"       . treemacs-select-window)
	  ("C-x t t"   . treemacs)
	  ("C-x t C-t" . treemacs-find-file)))

#+END_SRC

** ace-window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :bind (("M-o" . ace-window)))
#+END_SRC

** dired
#+BEGIN_SRC emacs-lisp
     (use-package dired
       :ensure nil
       :custom ((dired-listing-switches "-Aghot")))
  
  (add-hook 'dired-mode-hook
	    (lambda ()
	      (define-key dired-mode-map (kbd "e")
		(lambda () (interactive) (find-alternate-file "..")))))


     (use-package treemacs-icons-dired
     :hook (dired-mode . treemacs-icons-dired-enable-once)
     :ensure t)

     (use-package dired-open
       :ensure t
       :commands (dired dired-jump)
       :config
       (setq dired-open-extensions '(("traj" . "ase gui")
				     ("xyz" . "ase gui"))))

     (use-package dired-hide-dotfiles
       :ensure t
       :hook (dired-mode . dired-hide-dotfiles-mode)
       :config
       (define-key dired-mode-map "." #'dired-hide-dotfiles-mode))
#+END_SRC

* Git
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :init
      (progn
	(bind-key "C-x g" 'magit-status)
	))
    (setq auto-revert-check-vc-info t)
  #+END_SRC
  



