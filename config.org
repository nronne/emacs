#+STARTUP: overview

* General Setup
** Interface
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (save-place-mode 1)
  (column-number-mode 1)
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Buffer
#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
  (setq uniquify-separator "/")
  (setq uniquify-after-kill-buffer-p t)    ; rename after killing uniquified
  (setq uniquify-ignore-buffers-re "^\\*") ; don't muck with special buffers
  (global-set-key (kbd "C-x C-b") 'bs-show) ; Changes buffer-list
#+END_SRC

** Window
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings)) ; shift+arrow to move between windows
#+END_SRC

** Backup handling
#+BEGIN_SRC emacs-lisp
  (setq backup-by-copying t)
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
	backup-by-copying t    ; Don't delink hardlinks
	version-control t      ; Use version numbers on backups
	delete-old-versions t  ; Automatically delete excess backups
	kept-new-versions 20   ; how many of the newest versions to keep
	kept-old-versions 5    ; and how many of the old
    )
#+END_SRC

** Basic typing help 
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode 1) ; automatic brackets
#+END_SRC


* Theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'leuven)
#+END_SRC


* Installed packages
** try
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t 
    :config
    (which-key-mode))
#+END_SRC

** org mode
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

** ido
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t) ; ido package  
  (setq ido-everywhere t) 
  (ido-mode 1)
#+END_SRC

** undo-tree
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :ensure t
       :init
       (global-undo-tree-mode))
   #+END_SRC

** counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))

#+END_SRC

** swiper/ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "%d/%d ")
    (setq ivy-display-style 'fancy))


  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper-isearch)
	   ("C-r" . swiper-isearch)
	   ("C-c C-r" . ivy-resume)
	   ("M-x" . counsel-M-x)
	   ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))
#+END_SRC

** auto-complete
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)
      ))
#+END_SRC


